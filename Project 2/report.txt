1) This project was implemented using a doubly circular linked list. This means
that the header points to a dummy node containing no initialized value. This
dummy node's "next" pointer points to the first node containing a value. Each
node contains a value, a next pointer that points to the next node, and a
previous pointer that points to the previous node. The next pointer of the last
node points at the head dummy node, and the previous pointer of the head dummy
node points at the last node of the list. There is no particular order to these
lists as implemented.

2) Copy Constructor:
copy over number of elements
if copy not empty:
   append new node
repeatedly:
   append new node and update data members
if copy head is reached:
   delete empty head
   ensure proper pointers

Assignment Operator:
copy over number of elements
remove all elements from Set
if assign is not empty:
   append new node
repeatedly:
   append new node and update data members
if assign head is reached:
   delete empty head
   ensure proper pointers
return copied set

Set:
check proper bounds on pos
repeatedly:
	take value of node
	count number greater than
if match pos:
set value to value

Unite:
if result is alias for s1:
   insert elements unique to s2 into result
if result is alias for s2:
   insert elements unique to s1 into result
else
   assign s1 to result
   insert elements unique to s2 into result
return result

Subtract:
if result is alias for s1:
   remove all elements not unique to s1 from result
else
   create new set
   assign values unique to s1 to new set
   assign new set to result
return result

3) Test cases: The following is a list of test cases I used to test my Set
implementation:

  Set s; //tests default constructor
  s.insert("Yes"); //tests insert
  s.insert("no"); //tests insert
  s.insert("maybe"); //tests insert
  assert(!s.empty()); //tests empty
  string n;
  s.get(2, n); //tests get
  assert(n == "no"); //tests get
  s.get(1,n); //tests get
  assert(n == "maybe"); //tests get
  Set y; //tests default constructor
  y.insert("har"); //tests insert
  y.insert("oof"); //tests insert
  y.insert("ye"); //tests insert
  y.get(2,n); //tests get
  assert(n == "ye"); //tests get
  assert(s.contains("Yes")); //tests get
  y.swap(s); //tests swap
  assert(!s.contains("Yes")); //tests swap
  Set z; //tests default constructor
  unite(s,y,z); //tests unite
  assert(z.size() == 6); //tests unite
  assert(z.contains("Yes")); //tests unite
  assert(z.contains("oof")); //tests unite
  Set t; //tests default constructor
  t.insert("Yes"); //tests insert
  t.insert("oof"); //tests insert
  Set r; //tests default constructor
  subtract(z,t,r); //tests subtract
  assert(r.size() == 4); //tests subtract
  assert(!r.contains("oof")); //tests subtract
  assert(r.contains("maybe")); //tests subtract
  Set a = t; //tests assignment operator
  unite(z, t, a); //tests unite alias case
  assert(a.contains("Yes")); //tests unite alias case
  subtract(z, t, a); //tests subtract alias case
  assert(!a.contains("Yes")); //tests subtract alias case
  assert(a.contains("ye")); //tests subtract alias case
  cout << "all tests passed" << endl;

